name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Windows
      run: npm run build:win
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/*.exe
        if-no-files-found: warn

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build macOS
      run: |
        npm run build:mac
        # Vérifier que les fichiers ont été créés correctement
        ls -la dist/
        # Vérifier l'intégrité des DMG
        if ls dist/*.dmg 1> /dev/null 2>&1; then
          hdiutil verify dist/*.dmg
        fi
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        ELECTRON_SKIP_BINARY_DOWNLOAD: true
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.dmg
          dist/*.zip
        if-no-files-found: warn

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Linux
      run: npm run build:linux
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: dist/*.AppImage
        if-no-files-found: warn

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: dist/
        
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: dist/
        
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: dist/
        
    - name: Get version from package.json
      id: version
      run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Suivi des Dépenses v${{ steps.version.outputs.VERSION }}
        files: |
          dist/*.exe
          dist/*.dmg
          dist/*.zip
          dist/*.AppImage
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
